{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyOAcODkPtR2kf4SdqGo9YkS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "ir",
      "display_name": "R"
    },
    "language_info": {
      "name": "R"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Raman87deep/ACB-New-Systems/blob/main/MXQ500\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2dy5gTrfNA9n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# MXQ500 Statistical Data Analysis\n",
        "# Assignment 1: Problem-solving task 1\n",
        "# Student Name: [Your Name]\n",
        "# Student Number: [Your Number]\n",
        "\n",
        "# Load required libraries\n",
        "import pandas as pd\n",
        "\n",
        "# Set working directory (adjust as needed)\n",
        "# import os\n",
        "# os.chdir(\"your/working/directory\")\n",
        "\n",
        "# ===== STEP 1: Load and Filter Data =====\n",
        "\n",
        "# Load the main dataset\n",
        "flight_data = pd.read_csv(\"PST1Data.csv\")\n",
        "\n",
        "# IMPORTANT: Replace 'YOUR_ORIGIN' with your assigned origin code\n",
        "YOUR_ORIGIN = \"XNA\"  # Northwest Arkansas Regional Airport\n",
        "\n",
        "# Filter by your unique Origin and remove Origin columns\n",
        "my_flight_data = flight_data[flight_data['Origin'] == YOUR_ORIGIN].drop(columns=['Origin', 'OriginStateName'])\n",
        "\n",
        "# Load airport codes\n",
        "airport_codes = pd.read_csv(\"PST1AirportCodes.csv\", header=None, names=[\"DestAirportName\", \"Dest\"])\n",
        "\n",
        "# Load airline codes\n",
        "airline_codes = pd.read_csv(\"PST1AirlineCodes.csv\", header=None, names=[\"AirlineName\", \"Reporting_Airline\"])\n",
        "\n",
        "# Join to add airport and airline names\n",
        "my_flight_data = pd.merge(my_flight_data, airport_codes, on=\"Dest\", how=\"left\")\n",
        "my_flight_data = pd.merge(my_flight_data, airline_codes, on=\"Reporting_Airline\", how=\"left\")\n",
        "\n",
        "# ===== SECTION A1: Data Structure =====\n",
        "\n",
        "# View structure of the data\n",
        "print(my_flight_data.info())\n",
        "\n",
        "# Create data dictionary\n",
        "data_dict = pd.DataFrame({\n",
        "    'Variable': my_flight_data.columns,\n",
        "    'Description': [\n",
        "        \"Date of the flight\",\n",
        "        \"Airline code\",\n",
        "        \"Destination airport code\",\n",
        "        \"Destination state name\",\n",
        "        \"Departure delay in minutes (negative = early)\",\n",
        "        \"Arrival delay in minutes (negative = early)\",\n",
        "        \"Destination airport name\",\n",
        "        \"Airline name\"\n",
        "    ],\n",
        "    'Type': [\"Date\", \"Categorical\", \"Categorical\", \"Categorical\",\n",
        "             \"Numeric\", \"Numeric\", \"Categorical\", \"Categorical\"],\n",
        "    'Class': my_flight_data.dtypes\n",
        "})\n",
        "\n",
        "print(data_dict)\n",
        "\n",
        "# Convert data types\n",
        "my_flight_data['FlightDate'] = pd.to_datetime(my_flight_data['FlightDate'], format=\"%Y-%m-%d\") # Convert to Date\n",
        "my_flight_data['DepartureDelay'] = pd.to_numeric(my_flight_data['DepartureDelay'])\n",
        "my_flight_data['ArrivalDelay'] = pd.to_numeric(my_flight_data['ArrivalDelay'])\n",
        "my_flight_data['Reporting_Airline'] = my_flight_data['Reporting_Airline'].astype('category')\n",
        "my_flight_data['Dest'] = my_flight_data['Dest'].astype('category')\n",
        "my_flight_data['DestStateName'] = my_flight_data['DestStateName'].astype('category')\n",
        "my_flight_data['DestAirportName'] = my_flight_data['DestAirportName'].astype('category')\n",
        "my_flight_data['AirlineName'] = my_flight_data['AirlineName'].astype('category')\n",
        "\n",
        "\n",
        "# Check the structure again after conversion\n",
        "print(my_flight_data.info())\n"
      ],
      "metadata": {
        "id": "K1OWJ1ODaGTO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "outputId": "701da951-6b55-482e-8d34-143b7712443b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'PST1Data.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3459544930.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Load the main dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mflight_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"PST1Data.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# IMPORTANT: Replace 'YOUR_ORIGIN' with your assigned origin code\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'PST1Data.csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "3ad1497b",
        "outputId": "f7340347-fd15-476c-df54-d9c0791340ff"
      },
      "source": [
        "# MXQ500 Statistical Data Analysis\n",
        "# Assignment 1: Problem-solving task 1\n",
        "# Student Name: [Your Name]\n",
        "# Student Number: [Your Number]\n",
        "\n",
        "# Load required libraries\n",
        "library(tidyverse)\n",
        "library(ggplot2)\n",
        "library(dplyr)\n",
        "library(forcats)\n",
        "library(knitr)\n",
        "library(kableExtra)\n",
        "\n",
        "# Set working directory (adjust as needed)\n",
        "# setwd(\"your/working/directory\")\n",
        "\n",
        "# ===== STEP 1: Load and Filter Data =====\n",
        "\n",
        "# Load the main dataset\n",
        "flight_data <- read.csv(\"PST1Data.csv\", stringsAsFactors = FALSE)\n",
        "\n",
        "# IMPORTANT: Replace 'YOUR_ORIGIN' with your assigned origin code\n",
        "YOUR_ORIGIN <- \"XNA\"  # Northwest Arkansas Regional Airport\n",
        "\n",
        "# Filter by your unique Origin and remove Origin columns\n",
        "my_flight_data <- flight_data %>%\n",
        "  filter(Origin == YOUR_ORIGIN) %>%\n",
        "  select(-Origin, -OriginStateName)\n",
        "\n",
        "# Load airport codes\n",
        "airport_codes <- read.csv(\"PST1AirportCodes.csv\", stringsAsFactors = FALSE)\n",
        "names(airport_codes) <- c(\"DestAirportName\", \"Dest\")\n",
        "\n",
        "# Load airline codes\n",
        "airline_codes <- read.csv(\"PST1AirlineCodes.csv\", stringsAsFactors = FALSE)\n",
        "names(airline_codes) <- c(\"AirlineName\", \"Reporting_Airline\")\n",
        "\n",
        "# Join to add airport and airline names\n",
        "my_flight_data <- my_flight_data %>%\n",
        "  left_join(airport_codes, by = \"Dest\") %>%\n",
        "  left_join(airline_codes, by = \"Reporting_Airline\")\n",
        "\n",
        "# ===== SECTION A1: Data Structure =====\n",
        "\n",
        "# View structure of the data\n",
        "str(my_flight_data)\n",
        "\n",
        "# Create data dictionary\n",
        "data_dict <- data.frame(\n",
        "  Variable = names(my_flight_data),\n",
        "  Description = c(\n",
        "    \"Date of the flight\",\n",
        "    \"Airline code\",\n",
        "    \"Destination airport code\",\n",
        "    \"Destination state name\",\n",
        "    \"Departure delay in minutes (negative = early)\",\n",
        "    \"Arrival delay in minutes (negative = early)\",\n",
        "    \"Destination airport name\",\n",
        "    \"Airline name\"\n",
        "  ),\n",
        "  Type = c(\"Date\", \"Categorical\", \"Categorical\", \"Categorical\",\n",
        "           \"Numeric\", \"Numeric\", \"Categorical\", \"Categorical\"),\n",
        "  Class = sapply(my_flight_data, class)\n",
        ")\n",
        "\n",
        "print(data_dict)\n",
        "\n",
        "# Convert data types\n",
        "my_flight_data <- my_flight_data %>%\n",
        "  mutate(\n",
        "    FlightDate = as.Date(FlightDate, format = \"%Y-%m-%d\"), # Convert to Date\n",
        "    DepartureDelay = as.numeric(DepartureDelay),\n",
        "    ArrivalDelay = as.numeric(ArrivalDelay),\n",
        "    Reporting_Airline = as.factor(Reporting_Airline),\n",
        "    Dest = as.factor(Dest),\n",
        "    DestStateName = as.factor(DestStateName),\n",
        "    DestAirportName = as.factor(DestAirportName),\n",
        "    AirlineName = as.factor(AirlineName)\n",
        "  )\n",
        "\n",
        "# Check the structure again after conversion\n",
        "str(my_flight_data)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-832875595.py, line 26)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-832875595.py\"\u001b[0;36m, line \u001b[0;32m26\u001b[0m\n\u001b[0;31m    my_flight_data <- flight_data %>%\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "c869430e",
        "outputId": "24e6caab-f882-4b4b-9cca-08d7fa330657"
      },
      "source": [
        "# MXQ500 Statistical Data Analysis\n",
        "# Assignment 1: Problem-solving task 1\n",
        "# Student Name: [Your Name]\n",
        "# Student Number: [Your Number]\n",
        "\n",
        "# Load required libraries\n",
        "library(tidyverse)\n",
        "library(ggplot2)\n",
        "library(dplyr)\n",
        "library(forcats)\n",
        "library(knitr)\n",
        "library(kableExtra)\n",
        "\n",
        "# Set working directory (adjust as needed)\n",
        "# setwd(\"your/working/directory\")\n",
        "\n",
        "# ===== STEP 1: Load and Filter Data =====\n",
        "\n",
        "# Load the main dataset\n",
        "flight_data <- read.csv(\"PST1Data.csv\", stringsAsFactors = FALSE)\n",
        "\n",
        "# IMPORTANT: Replace 'YOUR_ORIGIN' with your assigned origin code\n",
        "YOUR_ORIGIN <- \"XNA\"  # Northwest Arkansas Regional Airport\n",
        "\n",
        "# Filter by your unique Origin and remove Origin columns\n",
        "my_flight_data <- flight_data %>%\n",
        "  filter(Origin == YOUR_ORIGIN) %>%\n",
        "  select(-Origin, -OriginStateName)\n",
        "\n",
        "# Load airport codes\n",
        "airport_codes <- read.csv(\"PST1AirportCodes.csv\", stringsAsFactors = FALSE)\n",
        "names(airport_codes) <- c(\"DestAirportName\", \"Dest\")\n",
        "\n",
        "# Load airline codes\n",
        "airline_codes <- read.csv(\"PST1AirlineCodes.csv\", stringsAsFactors = FALSE)\n",
        "names(airline_codes) <- c(\"AirlineName\", \"Reporting_Airline\")\n",
        "\n",
        "# Join to add airport and airline names\n",
        "my_flight_data <- my_flight_data %>%\n",
        "  left_join(airport_codes, by = \"Dest\") %>%\n",
        "  left_join(airline_codes, by = \"Reporting_Airline\")\n",
        "\n",
        "# ===== SECTION A1: Data Structure =====\n",
        "\n",
        "# View structure of the data\n",
        "str(my_flight_data)\n",
        "\n",
        "# Create data dictionary\n",
        "data_dict <- data.frame(\n",
        "  Variable = names(my_flight_data),\n",
        "  Description = c(\n",
        "    \"Date of the flight\",\n",
        "    \"Airline code\",\n",
        "    \"Destination airport code\",\n",
        "    \"Destination state name\",\n",
        "    \"Departure delay in minutes (negative = early)\",\n",
        "    \"Arrival delay in minutes (negative = early)\",\n",
        "    \"Destination airport name\",\n",
        "    \"Airline name\"\n",
        "  ),\n",
        "  Type = c(\"Date\", \"Categorical\", \"Categorical\", \"Categorical\",\n",
        "           \"Numeric\", \"Numeric\", \"Categorical\", \"Categorical\"),\n",
        "  Class = sapply(my_flight_data, class)\n",
        ")\n",
        "\n",
        "print(data_dict)\n",
        "\n",
        "# Convert data types\n",
        "my_flight_data <- my_flight_data %>%\n",
        "  mutate(\n",
        "    FlightDate = as.Date(FlightDate, format = \"%Y-%m-%d\"), # Convert to Date\n",
        "    DepartureDelay = as.numeric(DepartureDelay),\n",
        "    ArrivalDelay = as.numeric(ArrivalDelay),\n",
        "    Reporting_Airline = as.factor(Reporting_Airline),\n",
        "    Dest = as.factor(Dest),\n",
        "    DestStateName = as.factor(DestStateName),\n",
        "    DestAirportName = as.factor(DestAirportName),\n",
        "    AirlineName = as.factor(AirlineName)\n",
        "  )\n",
        "\n",
        "# Check the structure again after conversion\n",
        "str(my_flight_data)\n",
        "\n",
        "# Summary statistics for departure delays\n",
        "dep_delay_summary <- my_flight_data %>%\n",
        "  filter(!is.na(DepartureDelay)) %>% # Corrected column name\n",
        "  summarise(\n",
        "    Observations = n(),\n",
        "    Mean = mean(DepartureDelay), # Corrected column name\n",
        "    Median = median(DepartureDelay), # Corrected column name\n",
        "    SD = sd(DepartureDelay) # Corrected column name\n",
        "  )\n",
        "\n",
        "print(\"Overall Departure Delay Summary:\")\n",
        "print(dep_delay_summary)\n",
        "\n",
        "# Top 5 airlines summary\n",
        "top_airlines <- my_flight_data %>%\n",
        "  count(AirlineName) %>%\n",
        "  top_n(5, n) %>%\n",
        "  pull(AirlineName)\n",
        "\n",
        "airline_summary <- my_flight_data %>%\n",
        "  filter(!is.na(DepartureDelay), AirlineName %in% top_airlines) %>% # Corrected column name\n",
        "  group_by(AirlineName) %>%\n",
        "  summarise(\n",
        "    Observations = n(),\n",
        "    Mean = mean(DepartureDelay), # Corrected column name\n",
        "    Median = median(DepartureDelay), # Corrected column name\n",
        "    SD = sd(DepartureDelay) # Corrected column name\n",
        "  ) %>%\n",
        "  arrange(desc(Observations))\n",
        "\n",
        "print(\"Top 5 Airlines Departure Delay Summary:\")\n",
        "print(airline_summary)\n",
        "\n",
        "# ===== SECTION A2: Graphical Summaries =====\n",
        "\n",
        "# Plot 1: Relationship between departure and arrival delay\n",
        "plot1 <- ggplot(my_flight_data %>% filter(!is.na(DepartureDelay) & !is.na(ArrivalDelay)), # Corrected column names\n",
        "                aes(x = DepartureDelay, y = ArrivalDelay)) + # Corrected column names\n",
        "  geom_point(alpha = 0.3, color = \"steelblue\") +\n",
        "  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n",
        "  labs(title = \"Relationship between Departure and Arrival Delays\",\n",
        "       x = \"Departure Delay (minutes)\",\n",
        "       y = \"Arrival Delay (minutes)\",\n",
        "       caption = \"Negative values indicate early departures/arrivals\") +\n",
        "  theme_minimal() +\n",
        "  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n",
        "\n",
        "print(plot1)\n",
        "# ggsave(\"plot1_delay_relationship.png\", plot1, width = 10, height = 6, dpi = 300) # Commented out ggsave due to potential file system issues in Colab\n",
        "\n",
        "# Plot 2: Distribution of departure delays\n",
        "plot2 <- ggplot(my_flight_data %>% filter(!is.na(DepartureDelay)), # Corrected column name\n",
        "                aes(x = DepartureDelay)) + # Corrected column name\n",
        "  geom_histogram(binwidth = 5, fill = \"steelblue\", color = \"black\", alpha = 0.7) +\n",
        "  labs(title = \"Distribution of Departure Delays\",\n",
        "       x = \"Departure Delay (minutes)\",\n",
        "       y = \"Frequency\",\n",
        "       caption = \"Binwidth = 5 minutes\") +\n",
        "  theme_minimal() +\n",
        "  theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) +\n",
        "  xlim(-50, 100)\n",
        "\n",
        "print(plot2)\n",
        "# ggsave(\"plot2_dep_delay_dist.png\", plot2, width = 10, height = 6, dpi = 300) # Commented out ggsave due to potential file system issues in Colab\n",
        "\n",
        "# Plot 3: Distribution of arrival delays\n",
        "plot3 <- ggplot(my_flight_data %>% filter(!is.na(ArrivalDelay)), # Corrected column name\n",
        "                aes(x = ArrivalDelay)) + # Corrected column name\n",
        "  geom_histogram(binwidth = 5, fill = \"coral\", color = \"black\", alpha = 0.7) +\n",
        "  labs(title = \"Distribution of Arrival Delays\",\n",
        "       x = \"Arrival Delay (minutes)\",\n",
        "       y = \"Frequency\",\n",
        "       caption = \"Binwidth = 5 minutes\") +\n",
        "  theme_minimal() +\n",
        "  theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) +\n",
        "  xlim(-50, 100)\n",
        "\n",
        "print(plot3)\n",
        "# ggsave(\"plot3_arr_delay_dist.png\", plot3, width = 10, height = 6, dpi = 300) # Commented out ggsave due to potential file system issues in Colab\n",
        "\n",
        "# Plot 4: Departure delay by airline (top 3 + others)\n",
        "plot4_data <- my_flight_data %>%\n",
        "  filter(!is.na(DepartureDelay)) %>% # Corrected column name\n",
        "  mutate(AirlineGroup = fct_lump(AirlineName, n = 3, other_level = \"Other\"))\n",
        "\n",
        "plot4 <- ggplot(plot4_data, aes(x = AirlineGroup, y = DepartureDelay)) + # Corrected column name\n",
        "  geom_boxplot(fill = \"lightblue\", outlier.alpha = 0.3) +\n",
        "  coord_cartesian(ylim = c(-20, 20)) +\n",
        "  labs(title = \"Departure Delays by Airline\",\n",
        "       x = \"Airline\",\n",
        "       y = \"Departure Delay (minutes)\",\n",
        "       caption = \"Top 3 airlines shown individually, others combined\") +\n",
        "  theme_minimal() +\n",
        "  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n",
        "        axis.text.x = element_text(angle = 45, hjust = 1))\n",
        "\n",
        "print(plot4)\n",
        "# ggsave(\"plot4_delay_by_airline.png\", plot4, width = 10, height = 6, dpi = 300) # Commented out ggsave due to potential file system issues in Colab\n",
        "\n",
        "# Plot 5: Arrival delay by destination (top 3 + others)\n",
        "plot5_data <- my_flight_data %>%\n",
        "  filter(!is.na(ArrivalDelay)) %>% # Corrected column name\n",
        "  mutate(DestGroup = fct_lump(DestAirportName, n = 3, other_level = \"Other\"))\n",
        "\n",
        "plot5 <- ggplot(plot5_data, aes(x = DestGroup, y = ArrivalDelay)) + # Corrected column name\n",
        "  geom_boxplot(fill = \"lightcoral\", outlier.alpha = 0.3) +\n",
        "  coord_cartesian(ylim = c(-40, 40)) +\n",
        "  labs(title = \"Arrival Delays by Destination\",\n",
        "       x = \"Destination\",\n",
        "       y = \"Arrival Delay (minutes)\",\n",
        "       caption = \"Top 3 destinations shown individually, others combined\") +\n",
        "  theme_minimal() +\n",
        "  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"),\n",
        "        axis.text.x = element_text(angle = 45, hjust = 1))\n",
        "\n",
        "print(plot5)\n",
        "# ggsave(\"plot5_delay_by_dest.png\", plot5, width = 10, height = 6, dpi = 300) # Commented out ggsave due to potential file system issues in Colab\n",
        "\n",
        "# ===== SECTION B: Hypothesis Testing =====\n",
        "\n",
        "# Get top 2 airlines\n",
        "top_2_airlines <- my_flight_data %>%\n",
        "  count(AirlineName) %>%\n",
        "  top_n(2, n) %>%\n",
        "  pull(AirlineName)\n",
        "\n",
        "# Filter for top 2 airlines and remove NAs\n",
        "hypothesis_data <- my_flight_data %>%\n",
        "  filter(AirlineName %in% top_2_airlines, !is.na(DepartureDelay)) %>% # Corrected column name\n",
        "  mutate(Late = ifelse(DepartureDelay > 0, \"Late\", \"Not late\")) # Corrected column name\n",
        "\n",
        "# Create contingency table\n",
        "cont_table <- table(hypothesis_data$AirlineName, hypothesis_data$Late)\n",
        "print(\"Contingency Table:\")\n",
        "print(cont_table)\n",
        "\n",
        "# Add margins\n",
        "cont_table_margins <- addmargins(cont_table)\n",
        "print(\"Contingency Table with Totals:\")\n",
        "print(cont_table_margins)\n",
        "\n",
        "# Calculate expected frequencies\n",
        "expected_freq <- chisq.test(cont_table)$expected\n",
        "print(\"Expected Frequencies:\")\n",
        "print(expected_freq)\n",
        "\n",
        "# Check minimum expected frequency for test selection\n",
        "min_expected <- min(expected_freq)\n",
        "print(paste(\"Minimum expected frequency:\", min_expected))\n",
        "\n",
        "if(min_expected >= 5) {\n",
        "  # Chi-square test\n",
        "  chi_test <- chisq.test(cont_table)\n",
        "  print(\"Chi-square Test Results:\")\n",
        "  print(chi_test)\n",
        "\n",
        "  # Calculate test statistic manually\n",
        "  chi_stat <- sum((cont_table - expected_freq)^2 / expected_freq)\n",
        "  df <- (nrow(cont_table) - 1) * (ncol(cont_table) - 1)\n",
        "\n",
        "  print(paste(\"Chi-square statistic:\", chi_stat))\n",
        "  print(paste(\"Degrees of freedom:\", df))\n",
        "  print(paste(\"P-value:\", chi_test$p.value))\n",
        "} else {\n",
        "  # Fisher's exact test\n",
        "  fisher_test <- fisher.test(cont_table)\n",
        "  print(\"Fisher's Exact Test Results:\")\n",
        "  print(fisher_test)\n",
        "  print(paste(\"P-value:\", fisher_test$p.value))\n",
        "}"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "── \u001b[1mAttaching core tidyverse packages\u001b[22m ──────────────────────── tidyverse 2.0.0 ──\n",
            "\u001b[32m✔\u001b[39m \u001b[34mdplyr    \u001b[39m 1.1.4     \u001b[32m✔\u001b[39m \u001b[34mreadr    \u001b[39m 2.1.5\n",
            "\u001b[32m✔\u001b[39m \u001b[34mforcats  \u001b[39m 1.0.0     \u001b[32m✔\u001b[39m \u001b[34mstringr  \u001b[39m 1.5.1\n",
            "\u001b[32m✔\u001b[39m \u001b[34mggplot2  \u001b[39m 3.5.2     \u001b[32m✔\u001b[39m \u001b[34mtibble   \u001b[39m 3.3.0\n",
            "\u001b[32m✔\u001b[39m \u001b[34mlubridate\u001b[39m 1.9.4     \u001b[32m✔\u001b[39m \u001b[34mtidyr    \u001b[39m 1.3.1\n",
            "\u001b[32m✔\u001b[39m \u001b[34mpurrr    \u001b[39m 1.1.0     \n",
            "── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n",
            "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n",
            "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n",
            "\u001b[36mℹ\u001b[39m Use the conflicted package (\u001b[3m\u001b[34m<http://conflicted.r-lib.org/>\u001b[39m\u001b[23m) to force all conflicts to become errors\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ERROR",
          "evalue": "Error in library(kableExtra): there is no package called ‘kableExtra’\n",
          "traceback": [
            "Error in library(kableExtra): there is no package called ‘kableExtra’\nTraceback:\n",
            "1. stop(packageNotFoundError(package, lib.loc, sys.call()))"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6447f43a",
        "outputId": "5d30cbd5-b0cc-4dbc-fab9-0787c0f5e7e6"
      },
      "source": [
        "install.packages(\"kableExtra\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependency ‘svglite’\n",
            "\n",
            "\n"
          ]
        }
      ]
    }
  ]
}